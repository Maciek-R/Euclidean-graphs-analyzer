"""Contains implementation of GraphDatabase class
This module provides functionality of storing/retrieving Graph instances
to/from hard drive.
"""
import logging
import pickle
import sys
import gzip
import math
from pathlib import Path
from typing import Optional

from utils import *


class GraphDatabase:

    """Provides persistence of graphs instances generated by `GraphGenerator`
    It uses `pickle` package to de/serialize graphs instances, de/compresses
    them using `gzip` package and then reads/writes byte streams
    to/from hard drive. This way, graphs can be written/read fast from disk
    and occupies relatively small space.

    This class is closely coupled with `GraphGenerator`. It allows to
    store/retrieve graphs generated by it. Every generated graph has unique
    size, radius and index attributes, which are used then to uniquely name
    every graph on the hard drive.

    Attributes:
        output_dir (Path): Description
    """

    output_dir: Path

    def __init__(self, output_dir: Path) -> None:
        """ConPathuctor
        Initializes attributes

        Args:
            output_dir (Path): path to graph database directory
        """
        assert output_dir.is_dir()
        self.output_dir = output_dir

    @property
    def logger(self) -> logging.Logger:
        """Returns class logger instance

        Returns:
            logging.Logger: instance of class logger
        """
        return logging.getLogger("GraphDatabase")

    def try_read_graph(self, size: int, radius: float,
                       index: int) -> Optional[Graph]:
        """Tries to retrieve graph from the database
        First, it obtains the location of specified graph (size, radius, index)
        and then tries to retrieve it from a hard drive.
        Reading of graph is performed in three stages:
            1. Reading binary data from file
            2. Decompressing using `gzip` package
            3. Deserializing using `pickle` package

        When particular graph could not be loaded, it returns None (instead of
        throwing). Situations, when graph could not be read from database:
            * There is no graph stored in a database
            * Graph is corrupted (e.g. graph file was manipulated by someone)

        Args:
            size (int): size of graph
            radius (float): radius of graph
            index (int): index of graph

        Returns:
            Optional[Graph]: Retrieved graph (if success) or None (if failed)
        """
        path = self.make_path(size, radius, index)
        if not path.is_file():
            self.logger.debug("There is no graph file: %s", path)
            return None

        self.logger.debug("Reading graph file: %s...", path)
        with gzip.open(path, 'rb') as ifile:
            try:
                return pickle.load(ifile)
            except:  # Bare except, because there could be many exceptions
                self.logger.error("Could not read graph file: %s!", path)
                return None

    def write_graph(self, size: int, radius: float, index: int,
                    graph: Graph) -> None:
        """Stores graph in the database
        First, it obtains the location of given graph (size, radius, index)
        and then writes it to the hard drive.
        Writing of graph is performed in three stages:
            1. Serializing graph using `pickle` package
            2. Compressing it using `gzip` package
            3. Writing binary data to file

        Args:
            size (int): size of graph
            radius (float): radius of graph
            index (int): index of graph
            graph (Graph): graph to save
        """
        path = self.make_path(size, radius, index)
        self.logger.debug("Writing graph to file: %s...", path)
        with gzip.open(path, 'wb') as ofile:
            pickle.dump(graph, ofile)

    def make_path(self, size: int, radius: float, index: int) -> Path:
        """Creates path for particular graph in a database
        Resulted path will be like: '<size>-<radius>(<index>).graph.gz'

        Args:
            size (int): size of graph
            radius (float): radius of graph
            index (int): index of graph

        Returns:
            Path: path for the graph in a database
        """
        size_str = str(size)
        radius_str = str(radius).replace('.', '_')
        filename = Path('{}-{}({}).graph.gz'.format(size_str,
                                                    radius_str,
                                                    index))
        return Path.joinpath(self.output_dir, filename)
